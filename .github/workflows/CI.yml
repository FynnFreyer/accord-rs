name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  linux: # builds linux wheels
    runs-on: ${{ matrix.platform.runner }}
    container: quay.io/pypa/manylinux_2_34_${{ matrix.platform.target }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
#          - runner: ubuntu-latest
#            target: aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # install stable rust
          curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          # deps for building rust crate (especially openssl-sys)
          dnf install -y gcc pkgconf perl perl-FindBin perl-IPC-Cmd openssl-devel

      - name: Build for ${{ matrix.platform.target }}
        run: |
          source "${HOME}/.cargo/env"

          # build wheels for all python versions
          # TODO: python3.14 not supported yet -> change back or amend strategy
          # for PYBIN in /opt/python/cp3{8,9,1?-}*/bin; do
          for PYBIN in /opt/python/cp3{8,9,10,11,12,13}*/bin; do
            "${PYBIN}/pip" install maturin
            "${PYBIN}/maturin" build -i "${PYBIN}/python" --release --out dist
          done

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
#          - runner: windows-latest
#            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}

      - name: Install OpenSSL
        run: choco install openssl -y

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            git
            make
            gcc
            zlib-devel
            bzip2-devel
            xz-devel
            curl
            openssl-devel

      - name: Build HTSlib from source
        shell: msys2 {0}
        run: |
          git clone https://github.com/samtools/htslib.git
          cd htslib
          make

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist: # builds sdists suitable for compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: release
    environment: release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [ linux, sdist ]
    permissions:
      # Used to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'

      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

      - uses: actions/checkout@v4

      - name: Set up Rust
        run: rustup update stable && rustup default stable

      - name: Publish to crates.io
        run: cargo publish --token="${{ secrets.CRATES_IO_TOKEN }}"
